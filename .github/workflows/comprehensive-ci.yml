name: Comprehensive CI Pipeline

on:
  workflow_dispatch:
    inputs:
      run_security_scan:
        description: 'Run security scanning'
        required: false
        default: true
        type: boolean
      run_scenario_tests:
        description: 'Run scenario tests'
        required: false
        default: true
        type: boolean

env:
  TF_VERSION: "1.12.2"
  TFLINT_VERSION: "v0.55.0"
  TERRAFORM_DOCS_VERSION: "v0.17.0"
  CHECKOV_VERSION: "3.2.0"
  # TFSEC_VERSION: "1.28.10"  # Deprecated - using Trivy instead
  TRIVY_VERSION: "0.50.0"
  TERRASCAN_VERSION: "1.19.1"
  MICROK8S_CHANNEL: "1.28/stable"
  CI: "true"
  GITHUB_ACTIONS: "true"

jobs:
  # ============================================================================
  # VALIDATION JOBS - Fast feedback on basic issues
  # ============================================================================

  terraform-validation:
    name: 🔍 Terraform Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Init (Backend Disabled)
      run: terraform init -backend=false

    - name: Terraform Validate
      run: terraform validate

    - name: Validate Submodules
      run: |
        for dir in helm-*/; do
          if [ -d "$dir" ]; then
            echo "Validating $dir"
            cd "$dir"
            terraform init -backend=false
            terraform validate
            cd ..
          fi
        done

  tflint-analysis:
    name: 🔎 TFLint Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init (Backend Disabled)
      run: terraform init -backend=false

    - name: Cache TFLint plugin dir
      uses: actions/cache@v4
      with:
        path: ~/.tflint.d/plugins
        key: ${{ runner.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: ${{ env.TFLINT_VERSION }}

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint
      run: tflint -f compact

  documentation-check:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install terraform-docs
      run: |
        curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/${{ env.TERRAFORM_DOCS_VERSION }}/terraform-docs-${{ env.TERRAFORM_DOCS_VERSION }}-$(uname)-amd64.tar.gz
        tar -xzf terraform-docs.tar.gz
        chmod +x terraform-docs
        sudo mv terraform-docs /usr/local/bin/terraform-docs

    - name: Check Documentation
      run: |
        terraform-docs markdown table --output-file README.md .
        if ! git diff --quiet README.md; then
          echo "❌ README.md is not up to date with terraform-docs"
          echo "Please run 'terraform-docs markdown table --output-file README.md .' and commit the changes"
          exit 1
        fi

  # ============================================================================
  # SECURITY SCANNING - Parallel security analysis
  # ============================================================================

  security-scanning:
    name: 🛡️ Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        scanner: [checkov, terrascan, trivy, tfsec]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python (for Checkov)
      if: matrix.scanner == 'checkov'
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Checkov
      if: matrix.scanner == 'checkov'
      run: pip install checkov==${{ env.CHECKOV_VERSION }}

    - name: Install Terrascan
      if: matrix.scanner == 'terrascan'
      run: |
        curl -L "$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | grep -o -E "https://.+?_Linux_x86_64.tar.gz")" > terrascan.tar.gz
        tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz
        sudo mv terrascan /usr/local/bin && chmod +x /usr/local/bin/terrascan

    - name: Install TFSec
      if: matrix.scanner == 'tfsec'
      run: |
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

    - name: Setup Terraform (for security scans)
      if: matrix.scanner != 'trivy'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init (for security scans)
      if: matrix.scanner != 'trivy'
      run: terraform init -backend=false

    - name: Run Checkov Security Scan
      if: matrix.scanner == 'checkov'
      run: |
        echo "🛡️ Running Checkov comprehensive security scan..."
        checkov -d . \
          --framework terraform,kubernetes,helm \
          --output cli \
          --output sarif \
          --output json \
          --output-file-path console,checkov-results.sarif,checkov-results.json \
          --soft-fail \
          --compact || true

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🛡️ Checkov Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -f "checkov-results.json" ]; then
          PASSED=$(jq '.summary.passed' checkov-results.json)
          FAILED=$(jq '.summary.failed' checkov-results.json)
          SKIPPED=$(jq '.summary.skipped' checkov-results.json)

          echo "✅ **Passed**: $PASSED checks" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Failed**: $FAILED checks" >> $GITHUB_STEP_SUMMARY
          echo "⏭️ **Skipped**: $SKIPPED checks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$FAILED" -gt 0 ]; then
            echo "### 🔧 Common Fixes for Failed Checks:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Kubernetes Security:**" >> $GITHUB_STEP_SUMMARY
            echo "- CKV_K8S_8: Add resource limits to containers" >> $GITHUB_STEP_SUMMARY
            echo "- CKV_K8S_10: Set runAsNonRoot: true in securityContext" >> $GITHUB_STEP_SUMMARY
            echo "- CKV_K8S_12/13: Add readiness and liveness probes" >> $GITHUB_STEP_SUMMARY
            echo "- CKV_K8S_16: Set allowPrivilegeEscalation: false" >> $GITHUB_STEP_SUMMARY
            echo "- CKV_K8S_22: Set readOnlyRootFilesystem: true" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Terraform Security:**" >> $GITHUB_STEP_SUMMARY
            echo "- CKV_TF_1: Use commit hash in module sources" >> $GITHUB_STEP_SUMMARY
            echo "- CKV2_K8S_6: Minimize privilege escalation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📚 **Full Documentation**: https://www.checkov.io/5.Policy%20Index/kubernetes.html" >> $GITHUB_STEP_SUMMARY
          fi
        fi
      continue-on-error: true

    - name: Run Terrascan Policy Scan
      if: matrix.scanner == 'terrascan'
      run: |
        echo "🔒 Running Terrascan policy-as-code scan..."
        terrascan scan \
          --iac-type terraform \
          --policy-type k8s,aws,azure,gcp \
          --severity high,medium \
          --output human \
          --output sarif \
          --output-file terrascan-results.sarif \
          --verbose || true

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔒 Terrascan Policy Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Common Policy Violations & Fixes:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Security Policies:**" >> $GITHUB_STEP_SUMMARY
        echo "- AC_K8S_0001: Add securityContext.runAsNonRoot: true" >> $GITHUB_STEP_SUMMARY
        echo "- AC_K8S_0002: Set allowPrivilegeEscalation: false" >> $GITHUB_STEP_SUMMARY
        echo "- AC_K8S_0004/0005: Add resource limits and requests" >> $GITHUB_STEP_SUMMARY
        echo "- AC_K8S_0006/0007: Add liveness and readiness probes" >> $GITHUB_STEP_SUMMARY
        echo "- AC_K8S_0008: Set readOnlyRootFilesystem: true" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Network Policies:**" >> $GITHUB_STEP_SUMMARY
        echo "- AC_K8S_0011: Create default deny NetworkPolicy" >> $GITHUB_STEP_SUMMARY
        echo "- AC_K8S_0012: Configure TLS for Ingress resources" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**RBAC Policies:**" >> $GITHUB_STEP_SUMMARY
        echo "- AC_K8S_0016: Configure proper RBAC" >> $GITHUB_STEP_SUMMARY
        echo "- AC_K8S_0017: Set automountServiceAccountToken: false" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📚 **Full Documentation**: https://runterrascan.io/docs/policies/" >> $GITHUB_STEP_SUMMARY
      continue-on-error: true

    - name: Run TFSec Security Analysis
      if: matrix.scanner == 'tfsec'
      run: |
        echo "🔍 Running TFSec security analysis..."
        tfsec . \
          --format sarif \
          --out tfsec-results.sarif \
          --soft-fail || true

        tfsec . \
          --format json \
          --out tfsec-results.json \
          --soft-fail || true

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔍 TFSec Security Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -f "tfsec-results.json" ]; then
          RESULTS_COUNT=$(jq '.results | length' tfsec-results.json)
          echo "📊 **Total Issues Found**: $RESULTS_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$RESULTS_COUNT" -gt 0 ]; then
            echo "### 🔧 Common TFSec Issues & Fixes:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Kubernetes Security:**" >> $GITHUB_STEP_SUMMARY
            echo "- AVD-KSV-0001: Add resource limits to containers" >> $GITHUB_STEP_SUMMARY
            echo "- AVD-KSV-0012: Set runAsNonRoot: true" >> $GITHUB_STEP_SUMMARY
            echo "- AVD-KSV-0014: Set readOnlyRootFilesystem: true" >> $GITHUB_STEP_SUMMARY
            echo "- AVD-KSV-0017: Set allowPrivilegeEscalation: false" >> $GITHUB_STEP_SUMMARY
            echo "- AVD-KSV-0020: Don't run as root user" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**General Security:**" >> $GITHUB_STEP_SUMMARY
            echo "- Use specific image tags instead of 'latest'" >> $GITHUB_STEP_SUMMARY
            echo "- Enable security contexts for all containers" >> $GITHUB_STEP_SUMMARY
            echo "- Configure network policies for isolation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📚 **Full Documentation**: https://aquasecurity.github.io/tfsec/" >> $GITHUB_STEP_SUMMARY
          fi
        fi
      continue-on-error: true

    - name: Run Trivy Vulnerability Scanner
      if: matrix.scanner == 'trivy'
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'HIGH,CRITICAL'

    - name: Generate Security Summary (Trivy)
      if: matrix.scanner == 'trivy'
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔍 Trivy Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Scanned for HIGH and CRITICAL vulnerabilities in:" >> $GITHUB_STEP_SUMMARY
        echo "- Configuration files" >> $GITHUB_STEP_SUMMARY
        echo "- Infrastructure as Code" >> $GITHUB_STEP_SUMMARY
        echo "- Dependencies and packages" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Common Vulnerability Fixes:" >> $GITHUB_STEP_SUMMARY
        echo "- Update dependencies to latest secure versions" >> $GITHUB_STEP_SUMMARY
        echo "- Use specific image tags with known security status" >> $GITHUB_STEP_SUMMARY
        echo "- Apply security patches to base images" >> $GITHUB_STEP_SUMMARY
        echo "- Review and update Helm chart versions" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📚 **Documentation**: https://aquasecurity.github.io/trivy/" >> $GITHUB_STEP_SUMMARY

    - name: Upload Security Scan Results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && (matrix.scanner == 'checkov' || matrix.scanner == 'terrascan' || matrix.scanner == 'trivy' || matrix.scanner == 'tfsec')
      with:
        sarif_file: '${{ matrix.scanner }}-results.sarif'

    - name: Archive Security Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-${{ matrix.scanner }}
        path: |
          ${{ matrix.scanner }}-results.sarif
          ${{ matrix.scanner }}-results.json
        retention-days: 30

  # ============================================================================
  # TERRAFORM TESTING - Comprehensive test suite with MicroK8s
  # ============================================================================

  terraform-unit-tests:
    name: 🧪 Terraform Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        test-category: [
          "architecture-detection",
          "storage-configuration",
          "service-enablement",
          "mixed-cluster-logic"
        ]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MicroK8s
      run: |
        sudo snap install microk8s --classic --channel=${{ env.MICROK8S_CHANNEL }}
        sudo microk8s status --wait-ready --timeout=300
        sudo microk8s enable dns
        sudo usermod -a -G microk8s $USER
        sudo chown -f -R $USER ~/.kube || true
        mkdir -p ~/.kube
        sudo microk8s config > ~/.kube/config
        sudo microk8s.config > ~/.kube/build-config
        sudo microk8s.config > ~/.kube/default-config
        chmod 600 ~/.kube/config ~/.kube/build-config ~/.kube/default-config

    - name: Verify Kubernetes Access
      run: |
        kubectl version --client
        kubectl cluster-info
        kubectl get nodes

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init -backend=false

    - name: Run Unit Tests - ${{ matrix.test-category }}
      run: |
        case "${{ matrix.test-category }}" in
          "architecture-detection")
            terraform test -filter=tests-architecture.tftest.hcl -verbose
            ;;
          "storage-configuration")
            terraform test -filter=tests-storage.tftest.hcl -verbose
            ;;
          "service-enablement")
            terraform test -filter=tests-services.tftest.hcl -verbose
            ;;
          "mixed-cluster-logic")
            terraform test -filter=tests-mixed-cluster.tftest.hcl -verbose
            ;;
        esac
      continue-on-error: true

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ matrix.test-category }}
        path: |
          .terraform/
          terraform.tfstate*
        retention-days: 5

  terraform-scenario-tests:
    name: 🎯 Terraform Scenario Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        scenario: [
          "raspberry-pi-arm64",
          "mixed-architecture",
          "cloud-provider",
          "minimal-homelab",
          "production-ready"
        ]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MicroK8s
      run: |
        sudo snap install microk8s --classic --channel=${{ env.MICROK8S_CHANNEL }}
        sudo microk8s status --wait-ready --timeout=300
        sudo microk8s enable dns
        sudo usermod -a -G microk8s $USER
        sudo chown -f -R $USER ~/.kube || true
        mkdir -p ~/.kube
        sudo microk8s config > ~/.kube/config
        sudo microk8s.config > ~/.kube/build-config
        sudo microk8s.config > ~/.kube/default-config
        chmod 600 ~/.kube/config ~/.kube/build-config ~/.kube/default-config

    - name: Verify Kubernetes Access
      run: |
        kubectl version --client
        kubectl cluster-info
        kubectl get nodes

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init -backend=false

    - name: Create Scenario Configuration
      run: |
        case "${{ matrix.scenario }}" in
          "raspberry-pi-arm64")
            cp test-configs/raspberry-pi.tfvars terraform.tfvars
            ;;
          "mixed-architecture")
            cp test-configs/mixed-cluster.tfvars terraform.tfvars
            ;;
          "cloud-provider")
            cp test-configs/cloud.tfvars terraform.tfvars
            ;;
          "minimal-homelab")
            cp test-configs/minimal.tfvars terraform.tfvars
            ;;
          "production-ready")
            cp test-configs/production.tfvars terraform.tfvars
            ;;
        esac

    - name: Terraform Plan Validation
      run: |
        # Retry logic for network timeouts
        for i in {1..3}; do
          echo "Attempt $i of 3"
          if terraform plan -detailed-exitcode -out=tfplan-${{ matrix.scenario }} -var-file=terraform.tfvars; then
            echo "Plan succeeded on attempt $i"
            break
          elif [ $i -eq 3 ]; then
            echo "❌ All attempts failed for ${{ matrix.scenario }}"
            exit 1
          else
            echo "Attempt $i failed, retrying in 30 seconds..."
            sleep 30
          fi
        done
      continue-on-error: true
      id: plan

    - name: Validate Plan Output
      run: |
        if [ "${{ steps.plan.outcome }}" == "failure" ]; then
          echo "❌ Terraform plan failed for ${{ matrix.scenario }}"
          exit 1
        fi

        # Validate plan contains expected resources
        terraform show -json tfplan-${{ matrix.scenario }} | jq '.planned_values.root_module.resources | length'

    - name: Upload Plan Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: terraform-plan-${{ matrix.scenario }}
        path: |
          tfplan-${{ matrix.scenario }}
          terraform.tfvars
        retention-days: 5

  # ============================================================================
  # MAKEFILE INTEGRATION TESTS
  # ============================================================================

  makefile-integration:
    name: 🔨 Makefile Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MicroK8s
      run: |
        sudo snap install microk8s --classic --channel=${{ env.MICROK8S_CHANNEL }}
        sudo microk8s status --wait-ready --timeout=300
        sudo microk8s enable dns
        sudo usermod -a -G microk8s $USER
        sudo chown -f -R $USER ~/.kube || true
        mkdir -p ~/.kube
        sudo microk8s config > ~/.kube/config
        sudo microk8s.config > ~/.kube/build-config
        sudo microk8s.config > ~/.kube/default-config
        chmod 600 ~/.kube/config ~/.kube/build-config ~/.kube/default-config

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Install terraform-docs
      run: |
        curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/${{ env.TERRAFORM_DOCS_VERSION }}/terraform-docs-${{ env.TERRAFORM_DOCS_VERSION }}-$(uname)-amd64.tar.gz
        tar -xzf terraform-docs.tar.gz
        chmod +x terraform-docs
        sudo mv terraform-docs /usr/local/bin/terraform-docs

    - name: Test CI-Specific Make Commands
      run: |
        # Test validation commands
        make ci-validate
        make ci-lint

        # Test unit test categories
        make ci-test-architecture
        make ci-test-storage
        make ci-test-services

        # Test scenario validation
        make ci-test-scenarios

        # Test documentation generation
        make docs

    - name: Verify Make Help
      run: |
        make help
        if [ $? -ne 0 ]; then
          echo "❌ Make help command failed"
          exit 1
        fi

  # ============================================================================
  # COMPREHENSIVE REPORTING
  # ============================================================================

  ci-summary:
    name: 📊 CI Summary Report
    runs-on: ubuntu-latest
    needs: [
      terraform-validation,
      tflint-analysis,
      documentation-check,
      security-scanning,
      terraform-unit-tests,
      terraform-scenario-tests,
      makefile-integration
    ]
    if: always()
    timeout-minutes: 5

    steps:
    - name: Generate CI Summary
      run: |
        echo "## 📊 Comprehensive CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Core Validation" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.terraform-validation.result }}" == "success" ]]; then
          echo "✅ **Terraform Validation**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Terraform Validation**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.tflint-analysis.result }}" == "success" ]]; then
          echo "✅ **TFLint Analysis**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **TFLint Analysis**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.documentation-check.result }}" == "success" ]]; then
          echo "✅ **Documentation Check**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Documentation Check**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security & Testing" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.security-scanning.result }}" == "success" ]]; then
          echo "✅ **Security Scanning**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Security Scanning**: COMPLETED (check artifacts)" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.terraform-unit-tests.result }}" == "success" ]]; then
          echo "✅ **Unit Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Unit Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.terraform-scenario-tests.result }}" == "success" ]]; then
          echo "✅ **Scenario Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Scenario Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.makefile-integration.result }}" == "success" ]]; then
          echo "✅ **Makefile Integration**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Makefile Integration**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Review failed jobs and artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Check security scan results in Security tab" >> $GITHUB_STEP_SUMMARY
        echo "- Download test artifacts for debugging" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**All core validation must pass before merge!** 🚀" >> $GITHUB_STEP_SUMMARY
