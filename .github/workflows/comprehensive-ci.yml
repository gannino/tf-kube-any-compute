name: Comprehensive CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  TF_VERSION: "1.12.2"
  TFLINT_VERSION: "v0.47.0"
  TERRAFORM_DOCS_VERSION: "v0.17.0"
  CHECKOV_VERSION: "3.2.0"
  TRIVY_VERSION: "0.50.0"
  MICROK8S_CHANNEL: "1.28/stable"
  CI: "true"
  GITHUB_ACTIONS: "true"

jobs:
  # ============================================================================
  # VALIDATION JOBS - Fast feedback on basic issues
  # ============================================================================
  
  terraform-validation:
    name: üîç Terraform Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      
    - name: Terraform Init (Backend Disabled)
      run: terraform init -backend=false
      
    - name: Terraform Validate
      run: terraform validate
      
    - name: Validate Submodules
      run: |
        for dir in helm-*/; do
          if [ -d "$dir" ]; then
            echo "Validating $dir"
            cd "$dir"
            terraform init -backend=false
            terraform validate
            cd ..
          fi
        done

  tflint-analysis:
    name: üîé TFLint Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Init (Backend Disabled)
      run: terraform init -backend=false
      
    - name: Cache TFLint plugin dir
      uses: actions/cache@v4
      with:
        path: ~/.tflint.d/plugins
        key: ${{ runner.os }}-tflint-${{ hashFiles('.tflint.hcl') }}
        
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: ${{ env.TFLINT_VERSION }}
        
    - name: Init TFLint
      run: tflint --init
      
    - name: Run TFLint
      run: tflint -f compact

  documentation-check:
    name: üìö Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install terraform-docs
      run: |
        curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/${{ env.TERRAFORM_DOCS_VERSION }}/terraform-docs-${{ env.TERRAFORM_DOCS_VERSION }}-$(uname)-amd64.tar.gz
        tar -xzf terraform-docs.tar.gz
        chmod +x terraform-docs
        sudo mv terraform-docs /usr/local/bin/terraform-docs
        
    - name: Check Documentation
      run: |
        terraform-docs markdown table --output-file README.md .
        if ! git diff --quiet README.md; then
          echo "‚ùå README.md is not up to date with terraform-docs"
          echo "Please run 'terraform-docs markdown table --output-file README.md .' and commit the changes"
          exit 1
        fi

  # ============================================================================
  # SECURITY SCANNING - Parallel security analysis
  # ============================================================================
  
  security-scanning:
    name: üõ°Ô∏è Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        scanner: [checkov, trivy]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python (for Checkov)
      if: matrix.scanner == 'checkov'
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install Checkov
      if: matrix.scanner == 'checkov'
      run: pip install checkov==${{ env.CHECKOV_VERSION }}
      
    - name: Run Checkov Security Scan
      if: matrix.scanner == 'checkov'
      run: |
        checkov -d . \
          --framework terraform \
          --output cli \
          --output sarif \
          --output-file-path console,checkov-results.sarif \
          --soft-fail
      continue-on-error: true
      
    - name: Run Trivy Vulnerability Scanner
      if: matrix.scanner == 'trivy'
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Security Scan Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: '${{ matrix.scanner }}-results.sarif'
        
    - name: Archive Security Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-${{ matrix.scanner }}
        path: '${{ matrix.scanner }}-results.sarif'
        retention-days: 30

  # ============================================================================
  # TERRAFORM TESTING - Comprehensive test suite with MicroK8s
  # ============================================================================
  
  terraform-unit-tests:
    name: üß™ Terraform Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        test-category: [
          "architecture-detection",
          "storage-configuration", 
          "service-enablement",
          "mixed-cluster-logic"
        ]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup MicroK8s
      run: |
        sudo snap install microk8s --classic --channel=${{ env.MICROK8S_CHANNEL }}
        sudo microk8s status --wait-ready --timeout=300
        sudo microk8s enable dns
        sudo usermod -a -G microk8s $USER
        sudo chown -f -R $USER ~/.kube || true
        mkdir -p ~/.kube
        sudo microk8s config > ~/.kube/config
        sudo microk8s.config > ~/.kube/build-config
        sudo microk8s.config > ~/.kube/default-config
        chmod 600 ~/.kube/config ~/.kube/build-config ~/.kube/default-config
        
    - name: Verify Kubernetes Access
      run: |
        kubectl version --client
        kubectl cluster-info
        kubectl get nodes
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Init
      run: terraform init -backend=false
      
    - name: Run Unit Tests - ${{ matrix.test-category }}
      run: |
        case "${{ matrix.test-category }}" in
          "architecture-detection")
            terraform test -filter=tests-architecture.tftest.hcl -verbose
            ;;
          "storage-configuration")
            terraform test -filter=tests-storage.tftest.hcl -verbose
            ;;
          "service-enablement")
            terraform test -filter=tests-services.tftest.hcl -verbose
            ;;
          "mixed-cluster-logic")
            terraform test -filter=tests-mixed-cluster.tftest.hcl -verbose
            ;;
        esac
      continue-on-error: true
      
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ matrix.test-category }}
        path: |
          .terraform/
          terraform.tfstate*
        retention-days: 5

  terraform-scenario-tests:
    name: üéØ Terraform Scenario Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        scenario: [
          "raspberry-pi-arm64",
          "mixed-architecture", 
          "cloud-provider",
          "minimal-homelab",
          "production-ready"
        ]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup MicroK8s
      run: |
        sudo snap install microk8s --classic --channel=${{ env.MICROK8S_CHANNEL }}
        sudo microk8s status --wait-ready --timeout=300
        sudo microk8s enable dns
        sudo usermod -a -G microk8s $USER
        sudo chown -f -R $USER ~/.kube || true
        mkdir -p ~/.kube
        sudo microk8s config > ~/.kube/config
        sudo microk8s.config > ~/.kube/build-config
        sudo microk8s.config > ~/.kube/default-config
        chmod 600 ~/.kube/config ~/.kube/build-config ~/.kube/default-config
        
    - name: Verify Kubernetes Access
      run: |
        kubectl version --client
        kubectl cluster-info
        kubectl get nodes
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Init
      run: terraform init -backend=false
      
    - name: Create Scenario Configuration
      run: |
        case "${{ matrix.scenario }}" in
          "raspberry-pi-arm64")
            cp test-configs/raspberry-pi.tfvars terraform.tfvars
            ;;
          "mixed-architecture")
            cp test-configs/mixed-cluster.tfvars terraform.tfvars
            ;;
          "cloud-provider")
            cp test-configs/cloud.tfvars terraform.tfvars
            ;;
          "minimal-homelab")
            cp test-configs/minimal.tfvars terraform.tfvars
            ;;
          "production-ready")
            cp test-configs/production.tfvars terraform.tfvars
            ;;
        esac
        
    - name: Terraform Plan Validation
      run: |
        # Retry logic for network timeouts
        for i in {1..3}; do
          echo "Attempt $i of 3"
          if terraform plan -detailed-exitcode -out=tfplan-${{ matrix.scenario }} -var-file=terraform.tfvars; then
            echo "Plan succeeded on attempt $i"
            break
          elif [ $i -eq 3 ]; then
            echo "‚ùå All attempts failed for ${{ matrix.scenario }}"
            exit 1
          else
            echo "Attempt $i failed, retrying in 30 seconds..."
            sleep 30
          fi
        done
      continue-on-error: true
      id: plan
      
    - name: Validate Plan Output
      run: |
        if [ "${{ steps.plan.outcome }}" == "failure" ]; then
          echo "‚ùå Terraform plan failed for ${{ matrix.scenario }}"
          exit 1
        fi
        
        # Validate plan contains expected resources
        terraform show -json tfplan-${{ matrix.scenario }} | jq '.planned_values.root_module.resources | length'
        
    - name: Upload Plan Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: terraform-plan-${{ matrix.scenario }}
        path: |
          tfplan-${{ matrix.scenario }}
          terraform.tfvars
        retention-days: 5

  # ============================================================================
  # MAKEFILE INTEGRATION TESTS
  # ============================================================================
  
  makefile-integration:
    name: üî® Makefile Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup MicroK8s
      run: |
        sudo snap install microk8s --classic --channel=${{ env.MICROK8S_CHANNEL }}
        sudo microk8s status --wait-ready --timeout=300
        sudo microk8s enable dns
        sudo usermod -a -G microk8s $USER
        sudo chown -f -R $USER ~/.kube || true
        mkdir -p ~/.kube
        sudo microk8s config > ~/.kube/config
        sudo microk8s.config > ~/.kube/build-config
        sudo microk8s.config > ~/.kube/default-config
        chmod 600 ~/.kube/config ~/.kube/build-config ~/.kube/default-config
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Install terraform-docs
      run: |
        curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/${{ env.TERRAFORM_DOCS_VERSION }}/terraform-docs-${{ env.TERRAFORM_DOCS_VERSION }}-$(uname)-amd64.tar.gz
        tar -xzf terraform-docs.tar.gz
        chmod +x terraform-docs
        sudo mv terraform-docs /usr/local/bin/terraform-docs
        
    - name: Test CI-Specific Make Commands
      run: |
        # Test validation commands
        make ci-validate
        make ci-lint
        
        # Test unit test categories
        make ci-test-architecture
        make ci-test-storage
        make ci-test-services
        
        # Test scenario validation
        make ci-test-scenarios
        
        # Test documentation generation
        make docs
        
    - name: Verify Make Help
      run: |
        make help
        if [ $? -ne 0 ]; then
          echo "‚ùå Make help command failed"
          exit 1
        fi

  # ============================================================================
  # COMPREHENSIVE REPORTING
  # ============================================================================
  
  ci-summary:
    name: üìä CI Summary Report
    runs-on: ubuntu-latest
    needs: [
      terraform-validation,
      tflint-analysis,
      documentation-check,
      security-scanning,
      terraform-unit-tests,
      terraform-scenario-tests,
      makefile-integration
    ]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: Generate CI Summary
      run: |
        echo "## üìä Comprehensive CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Core Validation" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.terraform-validation.result }}" == "success" ]]; then
          echo "‚úÖ **Terraform Validation**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Terraform Validation**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.tflint-analysis.result }}" == "success" ]]; then
          echo "‚úÖ **TFLint Analysis**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **TFLint Analysis**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.documentation-check.result }}" == "success" ]]; then
          echo "‚úÖ **Documentation Check**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Documentation Check**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security & Testing" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.security-scanning.result }}" == "success" ]]; then
          echo "‚úÖ **Security Scanning**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **Security Scanning**: COMPLETED (check artifacts)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.terraform-unit-tests.result }}" == "success" ]]; then
          echo "‚úÖ **Unit Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Unit Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.terraform-scenario-tests.result }}" == "success" ]]; then
          echo "‚úÖ **Scenario Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Scenario Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.makefile-integration.result }}" == "success" ]]; then
          echo "‚úÖ **Makefile Integration**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Makefile Integration**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üéØ Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Review failed jobs and artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Check security scan results in Security tab" >> $GITHUB_STEP_SUMMARY
        echo "- Download test artifacts for debugging" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**All core validation must pass before merge!** üöÄ" >> $GITHUB_STEP_SUMMARY