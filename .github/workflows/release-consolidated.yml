name: Release Pipeline

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v2.0.1)'
        required: true
        default: 'v2.0.1'

env:
  TF_VERSION: "1.12.2"
  MICROK8S_CHANNEL: "1.28/stable"
  CI: "true"

jobs:
  # ============================================================================
  # PRE-RELEASE VALIDATION
  # ============================================================================

  pre-release-validation:
    name: 🔍 Pre-Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MicroK8s
      run: |
        sudo snap install microk8s --classic --channel=${{ env.MICROK8S_CHANNEL }}
        sudo microk8s status --wait-ready --timeout=300
        sudo microk8s enable dns
        sudo usermod -a -G microk8s $USER
        mkdir -p ~/.kube
        sudo microk8s config > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Full Validation Suite
      run: |
        terraform fmt -check -recursive
        terraform init -backend=false
        terraform validate

        # Validate submodules
        for dir in helm-*/; do
          if [ -d "$dir" ]; then
            cd "$dir"
            terraform init -backend=false
            terraform validate
            cd ..
          fi
        done

    - name: Run Complete Test Suite
      run: |
        make test-safe
        make test-validate
        make test-scenarios

    - name: Security Audit
      run: |
        # Quick security check with Trivy
        sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update && sudo apt-get install -y trivy
        trivy fs . --severity CRITICAL,HIGH --exit-code 1

  # ============================================================================
  # COMPATIBILITY TESTING
  # ============================================================================

  compatibility-test:
    name: 🧪 Compatibility Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        tf-version: ["1.10.0", "1.11.0", "1.12.2"]
        scenario: ["minimal", "raspberry-pi", "mixed-cluster"]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MicroK8s
      run: |
        sudo snap install microk8s --classic --channel=${{ env.MICROK8S_CHANNEL }}
        sudo microk8s status --wait-ready --timeout=300
        sudo microk8s enable dns
        sudo usermod -a -G microk8s $USER
        mkdir -p ~/.kube
        sudo microk8s config > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Setup Terraform ${{ matrix.tf-version }}
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ matrix.tf-version }}

    - name: Test Compatibility
      run: |
        terraform init -backend=false
        cp test-configs/${{ matrix.scenario }}.tfvars terraform.tfvars
        terraform validate
        terraform plan -detailed-exitcode

  # ============================================================================
  # DOCUMENTATION CHECK
  # ============================================================================

  documentation-check:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Check Required Files
      run: |
        required_files=("README.md" "main.tf" "variables.tf" "outputs.tf" "versions.tf" "LICENSE")
        missing_files=()

        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done

        if [ ${#missing_files[@]} -ne 0 ]; then
          echo "❌ Missing required files: ${missing_files[*]}"
          exit 1
        fi

    - name: Validate CHANGELOG
      run: |
        if [ ! -f "CHANGELOG.md" ]; then
          echo "❌ CHANGELOG.md is missing"
          exit 1
        fi

        version="${{ github.ref_name }}"
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          version="${{ github.event.inputs.version }}"
        fi

        if ! grep -q "$version" CHANGELOG.md; then
          echo "❌ Version $version not found in CHANGELOG.md"
          exit 1
        fi

  # ============================================================================
  # CREATE RELEASE
  # ============================================================================

  create-release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: [pre-release-validation, compatibility-test, documentation-check]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract Release Notes
      run: |
        version="${{ github.ref_name }}"
        awk "/^## \\[$version\\]/{flag=1; next} /^## \\[/{flag=0} flag" CHANGELOG.md > release_notes.md

        if [ ! -s release_notes.md ]; then
          echo "## $version" > release_notes.md
          echo "" >> release_notes.md
          echo "Release notes not available." >> release_notes.md
        fi

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body_path: release_notes.md
        draft: false
        prerelease: false

    - name: Generate Release Summary
      run: |
        echo "## 🎉 Release ${{ github.ref_name }} Created!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Validation Results:" >> $GITHUB_STEP_SUMMARY
        echo "- Pre-release validation: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "- Compatibility testing: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation check: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "- Security audit: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. 🔗 Visit [Terraform Registry](https://registry.terraform.io/)" >> $GITHUB_STEP_SUMMARY
        echo "2. 📝 Submit repository for publication" >> $GITHUB_STEP_SUMMARY
        echo "3. 🚀 Module will be available to the community!" >> $GITHUB_STEP_SUMMARY