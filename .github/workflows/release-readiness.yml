name: 🎯 Release Readiness Assessment

on:
  schedule:
    # Run monthly on the 1st at 9 AM UTC
    - cron: '0 9 1 * *'
  workflow_dispatch:
    inputs:
      force_assessment:
        description: 'Force assessment even if release issue exists'
        required: false
        default: false
        type: boolean

jobs:
  readiness-check:
    name: 📊 Assess Release Readiness
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.0'

      - name: ✅ Run Pre-Release Checklist
        run: |
          chmod +x scripts/pre-release-checklist.sh
          scripts/pre-release-checklist.sh

      - name: 📋 Check Release Readiness
        id: readiness
        run: |
          echo "Checking if we're ready for a release..."

          # Check if CHANGELOG has unreleased content
          if grep -q "## \[Unreleased\]" CHANGELOG.md && [ "$(grep -A 20 "## \[Unreleased\]" CHANGELOG.md | grep -E "^- |^### " | wc -l)" -gt 0 ]; then
            echo "has_unreleased=true" >> $GITHUB_OUTPUT
          else
            echo "has_unreleased=false" >> $GITHUB_OUTPUT
          fi

          # Check module validation
          terraform init -backend=false
          terraform validate
          if [ $? -eq 0 ]; then
            echo "validation_passed=true" >> $GITHUB_OUTPUT
          else
            echo "validation_passed=false" >> $GITHUB_OUTPUT
          fi

      - name: 🎯 Create Release Planning Issue
        if: steps.readiness.outputs.has_unreleased == 'true' && steps.readiness.outputs.validation_passed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const forceAssessment = '${{ github.event.inputs.force_assessment }}' === 'true';

            // Check if there's already an open release planning issue
            const issues = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'open',
              labels: 'release-planning'
            });

            if (issues.data.length === 0 || forceAssessment) {
              const issueBody = [
                '## 🎉 Module is Ready for Release!',
                '',
                'Our automated readiness check indicates the module is ready for a new release.',
                '',
                '### ✅ Readiness Status',
                '- Pre-release checklist: **PASSED**',
                '- CHANGELOG.md: **Has unreleased content**',
                '- Module validation: **PASSED**',
                '',
                '### 📋 Next Steps',
                '1. Review unreleased changes in CHANGELOG.md',
                '2. Decide on release type (patch/minor/major)',
                '3. Move unreleased content to new version section',
                '4. Create release using: `make release-[type]`',
                '5. Follow up with post-release tasks',
                '',
                '### 🤖 Automation',
                'This issue was created automatically by the release readiness check.',
                'Close this issue when the release is completed.',
                '',
                '**Generated**: ' + new Date().toISOString()
              ].join('\n');

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚀 Release Planning: Ready for Next Release',
                body: issueBody,
                labels: ['release-planning', 'automation']
              });

              console.log('✅ Created release planning issue');
            } else {
              console.log('ℹ️ Release planning issue already exists');
            }

  security-check:
    name: 🛡️ Security Assessment
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 TfSec Security Scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          additional_args: --format sarif --out tfsec-results.sarif
        continue-on-error: true

      - name: 📊 Generate Security Report
        run: |
          echo "## 🛡️ Security Assessment" > security-report.md
          echo "" >> security-report.md
          echo "- **Scan Date**: $(date)" >> security-report.md
          echo "- **Scanner**: TfSec" >> security-report.md
          echo "- **Status**: Security scan completed" >> security-report.md
          echo "- **Recommendation**: Review results and address any issues" >> security-report.md

      - name: 📤 Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-assessment
          path: |
            security-report.md
            tfsec-results.sarif

  notification:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [readiness-check, security-check]
    if: always() && needs.readiness-check.result == 'success'
    steps:
      - name: 📧 Send Notification
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('🔔 Release readiness assessment completed');
            console.log('📊 Check the release planning issue for next steps');
