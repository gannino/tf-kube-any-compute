# ============================================================================
# Pre-commit Configuration for tf-kube-any-compute
# ============================================================================
#
# Comprehensive pre-commit hooks for Terraform Kubernetes infrastructure
# with security scanning, linting, and detailed failure guidance.
#
# Installation:
#   pip install pre-commit
#   pre-commit install
#   pre-commit install --hook-type commit-msg
#
# Manual run:
#   pre-commit run --all-files
#
# ============================================================================

repos:
  # ============================================================================
  # CORE PRE-COMMIT HOOKS - Basic file validation
  # ============================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      - id: trailing-whitespace
        name: üßπ Remove trailing whitespace
        description: Removes trailing whitespace from files
        exclude: '\.md$|\.txt$'

      - id: end-of-file-fixer
        name: üìù Fix end of files
        description: Ensures files end with a newline
        exclude: '\.tfstate$|\.tfstate\.backup$'

      - id: check-yaml
        name: ‚úÖ Check YAML syntax
        description: Validates YAML file syntax
        args: ['--multi']

      - id: check-json
        name: ‚úÖ Check JSON syntax
        description: Validates JSON file syntax

      - id: check-merge-conflict
        name: üîç Check for merge conflicts
        description: Prevents committing merge conflict markers
        exclude: '\.(tf|tfvars|sh|js|md)$'  # Exclude files with decorative comment lines

      - id: check-added-large-files
        name: üì¶ Check file sizes
        description: Prevents committing large files (>500KB)
        args: ['--maxkb=500']
        exclude: '\.terraform/.*'  # Exclude terraform provider binaries

      - id: detect-private-key
        name: üîê Detect private keys
        description: Prevents committing private keys

      - id: check-case-conflict
        name: üìÅ Check case conflicts
        description: Prevents case-sensitive filename conflicts

  # ============================================================================
  # TERRAFORM VALIDATION - Core Terraform checks
  # ============================================================================
  - repo: https://github.com/antonbabenko/pre-commit-terraform
    rev: v1.100.0  # Managed by .tool-versions
    hooks:
      - id: terraform_fmt
        name: üé® Terraform format
        description: |
          Formats Terraform files using 'terraform fmt'

          üí° Fix: Run 'terraform fmt -recursive' to auto-format files
          üìö Docs: https://www.terraform.io/docs/commands/fmt.html
        args:
          - --args=-recursive
          - --args=-diff

      - id: terraform_docs
        name: üìö Generate Terraform docs
        description: |
          Updates CONTRIBUTING.md with terraform-docs

          üí° Fix: Install terraform-docs and run 'terraform-docs markdown table --output-file CONTRIBUTING.md .'
          üìö Docs: https://terraform-docs.io/
        args:
          - --args=--output-file=CONTRIBUTING.md
          - --args=--output-mode=inject
          - --args=--sort-by=name

      - id: terraform_tflint
        name: üîé TFLint analysis
        description: |
          Runs TFLint to catch common Terraform issues

          üí° Fix: Address TFLint warnings/errors shown above
          üìö Config: .tflint.hcl
          üîß Install: brew install tflint
        args:
          - --args=--init
          - --args=--config=.tflint.hcl
        exclude: '^test-configs/'

      # terraform_tfsec disabled - tfsec is deprecated, using Trivy instead
      # - id: terraform_tfsec
      #   name: üõ°Ô∏è TFSec security scan (DEPRECATED)
      #   description: |
      #     tfsec is deprecated and joining the Trivy family
      #     Use Trivy for Terraform security scanning instead
      #     üìö Migration: https://aquasecurity.github.io/tfsec/
      #   args:
      #     - --args=--soft-fail
      #     - --args=--format=compact

  # ============================================================================
  # ADVANCED SECURITY SCANNING - Comprehensive security analysis
  # ============================================================================
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0  # Managed by .tool-versions
    hooks:
      - id: detect-secrets
        name: üîç Detect secrets
        description: |
          Scans for potential secrets in code

          üí° Fix: Remove secrets or add to .secrets.baseline if false positive
          üìö Docs: https://github.com/Yelp/detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: '\.tfstate$|\.tfstate\.backup$|package-lock\.json$'

  - repo: local
    hooks:
      - id: terraform-plan-validate
        name: üß™ Terraform plan validation
        description: |
          Validates Terraform configuration with plan execution

          üí° This catches issues that static validation misses:
          ‚Ä¢ Sensitive output configuration errors
          ‚Ä¢ Resource dependency issues
          ‚Ä¢ Provider constraint violations
          ‚Ä¢ Module output validation

          üìö Docs: https://www.terraform.io/docs/commands/plan.html
        entry: sh
        args:
          - -c
          - >
            if [ "$CI" = "true" ] || [ "$GITHUB_ACTIONS" = "true" ]; then
              echo "Skipping Terraform plan in CI environment";
              exit 0;
            fi;

            echo "Running Terraform plan validation...";
            terraform init -backend=false >/dev/null 2>&1 || (echo "Terraform init failed" && exit 1);

            if [ -f "terraform.tfvars.example" ]; then
              cp terraform.tfvars.example terraform.tfvars;
              terraform plan -detailed-exitcode >/dev/null 2>&1;
              plan_exit=$?;
              rm -f terraform.tfvars;

              if [ $plan_exit -eq 1 ]; then
                echo "‚ö†Ô∏è Terraform plan failed - check sensitive outputs and configuration";
                echo "Continuing with push (plan validation is informational)";
              elif [ $plan_exit -eq 2 ]; then
                echo "‚úÖ Terraform plan succeeded with changes";
              else
                echo "‚úÖ Terraform plan succeeded with no changes";
              fi;
            else
              echo "‚ö†Ô∏è No terraform.tfvars.example found, skipping plan validation";
            fi;
            echo "‚úÖ Terraform plan validation completed"
        language: system
        files: \.(tf|tfvars)$
        pass_filenames: false

      - id: checkov
        name: üõ°Ô∏è Checkov security scan
        description: |
          Comprehensive security and compliance scanning

          üí° Common Fixes:
          ‚Ä¢ CKV_K8S_8: Add resource limits to containers
          ‚Ä¢ CKV_K8S_10: Don't run containers as root (runAsNonRoot: true)
          ‚Ä¢ CKV_K8S_12/13: Add readiness and liveness probes
          ‚Ä¢ CKV_K8S_16: Don't allow privilege escalation
          ‚Ä¢ CKV_K8S_22: Use read-only root filesystem
          ‚Ä¢ CKV_TF_1: Use commit hash in module sources

          üìö Docs: https://www.checkov.io/
          üîß Install: pip install checkov
        entry: sh
        args:
          - -c
          - >
            if command -v checkov >/dev/null 2>&1; then
              checkov -d . --framework terraform,kubernetes,helm --output cli --soft-fail --compact --quiet || true;
            else
              echo "Checkov not installed. Install with: pip install checkov";
            fi
        language: system
        files: \.(tf|yaml|yml|json)$
        exclude: '\.terraform/|\.git/|test-configs/|examples/'
        pass_filenames: false

  - repo: local
    hooks:
      - id: terrascan
        name: üîí Terrascan policy scan
        description: Policy-as-code security scanning for Terraform
        entry: sh
        args:
          - -c
          - >
            if command -v terrascan >/dev/null 2>&1; then
              terrascan scan --iac-type terraform --policy-type k8s,aws,azure,gcp --severity high,medium --verbose --non-recursive || true;
            else
              echo "Terrascan not installed. Install with: brew install terrascan";
            fi
        language: system
        files: \.tf$
        exclude: '\.terraform/|test-configs/|examples/'
        pass_filenames: false

  # ============================================================================
  # COMMIT MESSAGE VALIDATION - Conventional commits
  # ============================================================================
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v4.2.0  # Managed by .tool-versions
    hooks:
      - id: conventional-pre-commit
        name: üìù Validate commit message
        description: |
          Ensures commit messages follow conventional commit format

          üí° Format: <type>[optional scope]: <description>

          üè∑Ô∏è Valid Types:
          ‚Ä¢ feat: New features
          ‚Ä¢ fix: Bug fixes
          ‚Ä¢ docs: Documentation changes
          ‚Ä¢ style: Code style changes (formatting, etc.)
          ‚Ä¢ refactor: Code refactoring
          ‚Ä¢ test: Adding or updating tests
          ‚Ä¢ chore: Maintenance tasks
          ‚Ä¢ ci: CI/CD changes
          ‚Ä¢ perf: Performance improvements
          ‚Ä¢ security: Security improvements

          üìù Examples:
          ‚Ä¢ feat(traefik): add dashboard authentication
          ‚Ä¢ fix(vault): resolve unsealing issue
          ‚Ä¢ docs: update installation guide
          ‚Ä¢ test(storage): add NFS configuration tests
          ‚Ä¢ security(rbac): implement least privilege access

          üìö Docs: https://www.conventionalcommits.org/
        stages: [commit-msg]

  # ============================================================================
  # DOCUMENTATION AND MARKDOWN - Content validation (TEMPORARILY DISABLED)
  # ============================================================================
  # - repo: https://github.com/igorshubovych/markdownlint-cli
  #   rev: v0.39.0  # Managed by .tool-versions
  #   hooks:
  #     - id: markdownlint
  #       name: üìñ Markdown linting
        # description: Validates Markdown files (temporarily disabled)
        args: ['--fix']
        exclude: 'CHANGELOG.md'

  # ============================================================================
  # YAML AND JSON VALIDATION - Configuration file validation
  # ============================================================================
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.37.1  # Managed by .tool-versions
    hooks:
      - id: yamllint
        name: üìÑ YAML linting
        description: |
          Validates YAML files for syntax and style

          üí° Common Issues & Fixes:
          ‚Ä¢ line too long: Break long lines or increase line-length limit
          ‚Ä¢ trailing-spaces: Remove trailing spaces
          ‚Ä¢ empty-lines: Remove excessive empty lines
          ‚Ä¢ indentation: Use consistent indentation (2 or 4 spaces)
          ‚Ä¢ brackets: Use consistent bracket spacing
          ‚Ä¢ commas: Use consistent comma spacing
          ‚Ä¢ colons: Use consistent colon spacing
          ‚Ä¢ hyphens: Use consistent hyphen spacing
          ‚Ä¢ key-duplicates: Remove duplicate keys
          ‚Ä¢ new-line-at-end-of-file: Add newline at end of file
          ‚Ä¢ truthy: Use true/false instead of yes/no, on/off

          üìö Docs: https://yamllint.readthedocs.io/en/stable/rules.html
        args: ['-d', 'relaxed']
        files: \.(yaml|yml)$

  # ============================================================================
  # SHELL SCRIPT VALIDATION - Bash/shell script linting (TEMPORARILY DISABLED)
  # ============================================================================
  # - repo: https://github.com/shellcheck-py/shellcheck-py
  #   rev: v0.9.0.6  # Managed by .tool-versions
  #   hooks:
  #     - id: shellcheck
  #       name: üêö Shell script linting
  #       description: Validates shell scripts (temporarily disabled)
  #       files: \.(sh|bash)$
  #       exclude: '\.git/'

# ============================================================================
# FAILURE GUIDANCE CONFIGURATION
# ============================================================================
fail_fast: true
default_language_version:
  python: python3

# ============================================================================
# CUSTOM HOOK CONFIGURATION
# ============================================================================
ci:
  autofix_commit_msg: |
    ü§ñ [pre-commit.ci] auto fixes from pre-commit hooks

    Applied automatic fixes from pre-commit hooks.
    Please review the changes before merging.
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: 'ü§ñ [pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [terraform_tflint, checkov, terrascan]  # terraform_tfsec removed (deprecated)
  submodules: false
