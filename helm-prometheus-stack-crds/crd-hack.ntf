# Step 1: Clean installation of CRDs with proper verification
resource "null_resource" "install_crds" {
  triggers = {
    chart_version = var.chart_version
    namespace     = var.namespace
  }

  provisioner "local-exec" {
    command = <<EOT
      set -e
      
      echo "=== Installing kube-prometheus-stack CRDs ==="
      
      # Add and update helm repo
      helm repo add prometheus-community ${var.chart_repo} --force-update
      helm repo update
      
      # Remove any existing CRDs that might be causing conflicts
      echo "Cleaning up any existing conflicting CRDs..."
      kubectl delete crd prometheuses.monitoring.coreos.com --ignore-not-found=true
      kubectl delete crd alertmanagers.monitoring.coreos.com --ignore-not-found=true
      kubectl delete crd servicemonitors.monitoring.coreos.com --ignore-not-found=true
      kubectl delete crd prometheusrules.monitoring.coreos.com --ignore-not-found=true
      kubectl delete crd podmonitors.monitoring.coreos.com --ignore-not-found=true
      
      # Wait a bit for cleanup
      sleep 5
      
      # Template and apply CRDs only
      echo "Extracting and applying CRDs..."
      helm template ${var.name}-crds prometheus-community/${var.chart_name} \
        --version ${var.chart_version} \
        --namespace ${var.namespace} \
        --include-crds \
        --set crds.enabled=true \
        --set prometheus.enabled=false \
        --set alertmanager.enabled=false \
        --set grafana.enabled=false \
        --set prometheusOperator.enabled=false \
        --set prometheus-node-exporter.enabled=false \
        --set kube-state-metrics.enabled=false | \
        grep -E "^(apiVersion: apiextensions.k8s.io|kind: CustomResourceDefinition|metadata:|spec:|---)" | \
        kubectl apply --server-side --force-conflicts -f -
      
      # Wait for CRDs to be established with retries
      echo "Waiting for CRDs to be established..."
      for i in {1..30}; do
        if kubectl get crd prometheuses.monitoring.coreos.com >/dev/null 2>&1 && \
           kubectl get crd alertmanagers.monitoring.coreos.com >/dev/null 2>&1 && \
           kubectl get crd servicemonitors.monitoring.coreos.com >/dev/null 2>&1 && \
           kubectl get crd prometheusrules.monitoring.coreos.com >/dev/null 2>&1; then
          echo "✅ All required CRDs are established"
          break
        fi
        echo "⏳ Waiting for CRDs... (attempt $i/30)"
        sleep 2
      done
      
      # Final verification
      echo "=== CRD Verification ==="
      kubectl get crd | grep monitoring.coreos.com || echo "❌ No monitoring CRDs found"
      
      # List all established CRDs
      echo "✅ Established CRDs:"
      kubectl get crd prometheuses.monitoring.coreos.com --no-headers 2>/dev/null || echo "❌ Prometheus CRD missing"
      kubectl get crd alertmanagers.monitoring.coreos.com --no-headers 2>/dev/null || echo "❌ Alertmanager CRD missing"
      kubectl get crd servicemonitors.monitoring.coreos.com --no-headers 2>/dev/null || echo "❌ ServiceMonitor CRD missing"
      kubectl get crd prometheusrules.monitoring.coreos.com --no-headers 2>/dev/null || echo "❌ PrometheusRule CRD missing"
      kubectl get crd podmonitors.monitoring.coreos.com --no-headers 2>/dev/null || echo "❌ PodMonitor CRD missing"
      
      echo "=== CRD installation completed ==="
    EOT
    interpreter = ["/bin/bash", "-c"]
  }

  depends_on = [
    kubernetes_namespace.this
  ]
}

# Step 2: Verify CRDs are ready before proceeding
resource "null_resource" "verify_crds" {
  triggers = {
    crds_installed = null_resource.install_crds.id
  }

  provisioner "local-exec" {
    command = <<EOT
      set -e
      
      echo "=== Final CRD verification before Helm deployment ==="
      
      # Check that we can create a test resource (this validates the CRD is truly ready)
      kubectl apply -f - <<EOF || echo "CRD validation failed"
apiVersion: v1
kind: ConfigMap
metadata:
  name: crd-test-${var.namespace}
  namespace: ${var.namespace}
data:
  test: "crds-ready"
EOF
      
      # Clean up test resource
      kubectl delete configmap crd-test-${var.namespace} -n ${var.namespace} --ignore-not-found=true
      
      echo "✅ CRDs are ready for Helm deployment"
    EOT
    interpreter = ["/bin/bash", "-c"]
  }

  depends_on = [
    null_resource.install_crds
  ]
}
